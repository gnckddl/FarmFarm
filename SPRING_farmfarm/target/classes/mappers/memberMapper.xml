<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="spring.mvc.farmfarm.persistence.MemberDAO">
	<select id="idCheck" resultType="int">
		select count(mem_id) from
		tbl_member where mem_id=#{strId}
	</select>

	<select id="idPwdCheck" parameterType="java.util.Map"
		resultType="int">
		select mem_grade from tbl_member where mem_id=#{id} and
		mem_pwd=#{pwd}
	</select>

	<insert id="insertMember"
		parameterType="spring.mvc.farmfarm.dto.MemberDTO">
		insert into
		tbl_member(mem_id,mem_pwd,mem_name,mem_hp,mem_email,mem_address,mem_grade,mem_adv,mem_regDate)
		values(#{mem_id},#{mem_pwd},#{mem_name},#{mem_hp},#{mem_email},#{mem_address},1,0,sysdate)
	</insert>

	<delete id="deleteMember" parameterType="String">
		update tbl_member set
		mem_drop='Y',
		mem_id=('delete_'||lpad(tbl_memberDel_seq.nextval,7,0))||'_'||mem_id
		where mem_id=#{strId}
	</delete>

	<select id="getMemberInfo"
		resultType="spring.mvc.farmfarm.dto.MemberDTO">
		select * from tbl_member where mem_id=#{strId}
	</select>

	<update id="UpdateMember"
		parameterType="spring.mvc.farmfarm.dto.MemberDTO">
		update tbl_member set mem_pwd=#{mem_pwd},
		mem_hp=#{mem_hp}, mem_email=#{mem_email}, mem_address=#{mem_address}
		where mem_id=#{mem_id}
	</update>

	<select id="getAdvCnt" resultType="int">
		select count(*) from
		tbl_advantage where mem_id=#{strId}
	</select>

	<select id="getAdv" parameterType="java.util.Map"
		resultType="spring.mvc.farmfarm.dto.AdvantageDTO">
		<![CDATA[ 
			select * from ( select adv_key,m.mem_id,adv_reason,adv_point,to_char(adv_regDate, 'yyyy-mm-dd hh24:mi:ss') adv_regDate,mem_adv,rownum rNum from ( select * from tbl_advantage order by adv_regDate desc ) adv join tbl_member m on adv.mem_id=m.mem_id where m.mem_id=#{strId} ) where rNum >= #{start} AND rNum <=#{end}			
		]]>
	</select>


	<select id="getFundRanking"
		resultType="spring.mvc.farmfarm.dto.RankingDTO">
		select distinct f.fund_no,fund_title, fund_price,
		stock_name,stock_price,f.mem_id
		farmer_id,fund_join,to_char(fund_endDate, 'yyyy-mm-dd hh24:mi:ss')
		fund_endDate from tbl_fund f join tbl_join j on f.fund_no=j.fund_no
		join tbl_stock s on s.stock_no=f.stock_no join tbl_farm f on
		f.farm_key=s.farm_key
	</select>

	<select id="getAucRanking"
		resultType="spring.mvc.farmfarm.dto.RankingDTO">
		select distinct a.auc_no fund_no,auc_title
		fund_title,auc_nowPrice
		fund_price, stock_name,stock_price,f.mem_id
		farmer_id,auc_join
		fund_join,to_char(auc_endDate, 'yyyy-mm-dd
		hh24:mi:ss') fund_endDate from
		tbl_auction a join tbl_join j on
		a.auc_no=j.auc_no join tbl_stock s on
		s.stock_no=a.stock_no join
		tbl_farm f on f.farm_key=s.farm_key order by auc_join desc,
		auc_nowPrice desc
	</select>

	<select id="getDonateRanking"
		resultType="spring.mvc.farmfarm.dto.RankingDTO">
		select count(*) fund_join,md.mem_id
		farmer_id,sum(dona_price) fund_price,
		mem_name stock_name from
		tbl_memDo md join tbl_member m on
		md.mem_id=m.mem_id group by
		md.mem_id,mem_name order by fund_price
		desc, fund_join desc
	</select>


	<select id="getSearchCnt" resultType="int">
		select count(*)
		from
		tbl_stock s
		left join tbl_fund f on s.stock_no=f.stock_no
		left join
		tbl_auction a on s.stock_no=a.stock_no
		where (f.fund_no is not null or
		a.auc_no is not null) and
		s.stock_name=#{keyword}
	</select>

	<select id="getSearchData"
		resultType="spring.mvc.farmfarm.dto.SearchingDTO">
		<![CDATA[
			select * from(
			select s.stock_no,stock_name,stock_kg,stock_ea,stock_image,stock_kind, fund_no,fund_title,fund_price, fund_status,to_char(fund_regDate, 'yyyy-mm-dd HH:mm') fund_regDate,to_char(fund_endDate, 'yyyy-mm-dd hh24:mi') fund_endDate, auc_no, auc_title, auc_nowPrice, auc_status,to_char(auc_regDate, 'yyyy-mm-dd HH:mm') auc_regDate, to_char(auc_endDate, 'yyyy-mm-dd HH:mm') auc_endDate, rownum rNum
			from tbl_stock s 
			left join tbl_fund f on s.stock_no=f.stock_no 
			left join tbl_auction a on s.stock_no=a.stock_no
			where (f.fund_no is not null or a.auc_no is not null) and s.stock_name=#{keyword} order by s.STOCK_REGDATE desc)
			where rNum>=#{start} and rNum<=#{end}
		]]>
	</select>


	<select id="getAuctionList"
		resultType="spring.mvc.farmfarm.dto.AuctionListDTO">
		select auc_no,auc_title,auc_startPrice,stock_image ,mem_id
		from tbl_auction a join tbl_stock s on a.stock_no=s.stock_no
		join tbl_farm f on f.farm_key=s.farm_key
		where auc_status=2
	</select>

	<select id="getAuctionContent"
		resultType="spring.mvc.farmfarm.dto.AuctionDTO">
		select auc_no,stock_name,
		stock_detail,stock_kind,auc_join,auc_startPrice,auc_nowPrice,auc_regDate,auc_endDate,mem_id,stock_image,f.farm_key
		from tbl_stock s join tbl_auction a on s.stock_no=a.stock_no join
		tbl_farm f on f.farm_key=s.farm_key where auc_no=#{auc_no}
	</select>

	<select id="getNowPrice" resultType="Integer">
		select auc_nowPrice from
		tbl_auction where auc_no=#{auc_no}
	</select>

	<select id="getDonateList"
		resultType="spring.mvc.farmfarm.dto.DonateDTO">
		select doOrg_name,doForm_id from tbl_doOrg
	</select>

	<update id="auctionUpdate" parameterType="java.util.Map">
		update tbl_auction set
		auc_nowPrice=#{nowPrice} , auc_join=auc_join+1 where auc_no=#{auc_no}
	</update>

	<insert id="auctionJoinInsert" parameterType="java.util.Map">
		insert into
		tbl_join(join_no,mem_id,auc_no,join_aucPrice)
		values(tbl_join_seq.nextval,#{userId},#{auc_no},#{nowPrice})
	</insert>

	<select id="auctionJoinCheck" resultType="Integer">
		select join_no from
		tbl_join where mem_id=#{userId} and auc_no=#{auc_no}
	</select>

	<update id="auctionJoinUpdate" parameterType="java.util.Map">
		update tbl_join set
		join_aucPrice=#{nowPrice} where join_no=#{join_no}
	</update>

	<insert id="auctionJoinAdv" parameterType="java.util.Map">
		insert into
		tbl_advantage
		values(tbl_advantage_seq.nextval,#{userId},#{adv_reason},#{adv_point},sysdate)
	</insert>
	<!-- member adv 업데이트 -->
	<update id="updateAdv" parameterType="java.util.Map">
		update tbl_member set
		mem_adv=mem_adv+#{adv_point} where mem_id=#{userId}
	</update>


	<!-- 회원 경매진행내역 갯수 -->
	<select id="getAuctionDataCnt" resultType="Integer">
		select count(*)
		from
		(select count(*),a.auc_no from tbl_join j join tbl_auction a on
		j.auc_no=a.auc_no where mem_id=#{userId} group by a.auc_no)
	</select>

	<!-- 회원 경매진행내역 -->
	<select id="getAuctionData"
		resultType="spring.mvc.farmfarm.dto.AuctionDTO">
		select
		a.auc_no,stock_image,auc_title,auc_startprice,auc_nowprice,count(join_no)
		auc_join,auc_endDate
		from tbl_auction a join tbl_stock s on
		a.stock_no=s.stock_no
		join tbl_join j on j.auc_no=a.auc_no where
		j.mem_id=#{userId} group by
		a.auc_no,stock_image,auc_title,auc_startprice,auc_nowprice,auc_endDate
	</select>

	<select id="getAuctionProgress" parameterType="java.util.Map"
		resultType="spring.mvc.farmfarm.dto.AuctionDTO">
		select
		stock_image,auc_startPrice,auc_title,join_aucPrice,join_regDate,mem_id
		from tbl_auction a join tbl_stock s on a.stock_no=s.stock_no
		join
		tbl_join j on j.auc_no=a.auc_no where a.auc_no=#{auc_no} order by
		join_regDate desc
	</select>


	<!--펀드상품보기 글갯수 -->
	<select id="getFundCnt" resultType="int">
		select count(*) from tbl_fund
		where fund_status=2
	</select>

	<!--펀드상품보기 리스트 -->
	<select id="getFundProductsList" parameterType="java.util.Map"
		resultType="spring.mvc.farmfarm.dto.FundDTO">
        <![CDATA[
           SELECT *
         FROM(
         SELECT fund_no,stock_no,stock_image,stock_price,fund_join,fund_title,fund_content,fund_price,fund_status,fund_regDate,fund_endDate,mem_id, rownum rNum
           FROM (select fund_no, s.stock_no,s.stock_image,stock_price,fund_join, fund_title,fund_content,fund_price,fund_status,fund_regDate,fund_endDate,mem_id from tbl_fund fu join tbl_stock s on fu.stock_no=s.stock_no join tbl_farm f on f.farm_key=s.farm_key ORDER BY fund_regDate DESC  
         ))
         WHERE rNum >= #{start} AND rNum <= #{end}
         ]]>
	</select>
	<!--펀드상품보기 상세보기 -->
	<select id="getFundArticle" parameterType="java.util.Map"
		resultType="spring.mvc.farmfarm.dto.FundDTO">
		SELECT *
		FROM(
		SELECT
		fund_no,stock_no,stock_image,stock_price,fund_join,fund_title,fund_content,fund_price,fund_status,fund_regDate,fund_endDate,mem_id
		FROM (select fund_no,
		s.stock_no,s.stock_image,s.stock_price,fund_join,
		fund_title,fund_content,fund_price,fund_status,fund_regDate,fund_endDate,mem_id
		from tbl_fund fu join tbl_stock s on fu.stock_no=s.stock_no join
		tbl_farm f on f.farm_key=s.farm_key ORDER BY fund_regDate DESC
		))
		where
		fund_no=#{fund_no}
	</select>



	<select id="getFarmerAvg" parameterType="java.util.Map"
		resultType="spring.mvc.farmfarm.dto.AdvantageDTO">
		<![CDATA[ 
			select *from (select adv_key,mem_id,adv_reason,adv_point,adv_sumPoint,to_char(adv_regDate, 'yyyy-mm-dd hh24:mi:ss') adv_regDate,rownum rNum from (select * from tbl_advantage order by adv_regDate desc) where mem_id=#{strId}) where rNum >= #{start} AND rNum <=#{end}		
		]]>
	</select>


	<!-- 민웅 -->
	<!-- 농부되기 신청 -->
	<insert id="BecomFarm"
		parameterType="spring.mvc.farmfarm.dto.BecomeFarmerDTO">
		insert all
		into tbl_farm(farm_key,mem_id,farm_status)
		values(tbl_farm_seq.NEXTVAL, #{mem_id},1)
		into tbl_fPlan(farm_key,
		fPlan_title, fPlan_plan, fPlan_capital,
		fPlan_use, fPlan_detail,
		fPlan_address)
		values(tbl_farm_seq.CURRVAL, #{fPlan_title},
		#{fPlan_plan}, #{fPlan_capital}, #{fPlan_use},
		#{fPlan_detail},
		#{fPlan_address})
		select * from dual
	</insert>

	<!-- 기부내역 -->
	<select id="getDonated"
		resultType="spring.mvc.farmfarm.dto.DonateListDTO">
		SELECT
		m.dona_price,m.dona_date,d.doOrg_image,d.doOrg_name,d.doOrg_hp,d.doOrg_person,d.doOrg_address
		FROM tbl_memDo m JOIN tbl_doOrg d
		ON m.doForm_id = d.doForm_id
		WHERE
		mem_id=#{mem_id} order by dona_date desc
	</select>
	<!-- 시작-경매상세 농부관련데이터 -->
	<select id="getAuctionFarmer"
		resultType="spring.mvc.farmfarm.dto.AuctionFarmerDTO">
		select sum(auc_join) auc_join,sum(fund_join) fund_join
		from
		tbl_stock s left join tbl_auction a on s.stock_no=a.stock_no
		left join
		tbl_fund f on f.stock_no=s.stock_no
		where farm_key=#{farm_key}
	</select>

	<select id="getAuctionFarmerFund" resultType="int">
		select
		count(fund_no) fundCnt
		from tbl_stock s left join tbl_fund f on
		f.stock_no=s.stock_no
		where farm_key=#{farm_key} and fund_no is not
		null
	</select>
	<select id="getAuctionFarmerAuc" resultType="int">
		select
		count(auc_no)
		auctionCnt
		from tbl_stock s left join tbl_auction a on
		s.stock_no=a.stock_no
		where farm_key=#{farm_key} and a.auc_no is not null
	</select>

	<!-- 끝-경매상세 농부관련데이터 -->


	<!--펀드참여한적있는지 체크 -->
	<select id="FundJoinCheck" resultType="Integer">
		select join_no from
		tbl_join where mem_id=#{userId} and fund_no=#{fund_no}
	</select>

	<!--펀드데이터 업데이트 참여인원... -->
	<update id="FundUpdate" parameterType="java.util.Map">
		update tbl_fund set
		fund_join=fund_join+1 where fund_no=#{fund_no}
	</update>

	<!--펀드참여 인서트 -->
	<insert id="FundJoinInsert" parameterType="java.util.Map">
		insert into
		tbl_join(join_no,mem_id,fund_no,join_fundPrice)
		values(tbl_join_seq.nextval,#{userId},#{fund_no},#{stock_price})
	</insert>

	<!--펀드 참여한적있는사람 업뎃 -->
	<update id="FundJoinUpdate" parameterType="java.util.Map">
		update tbl_join set
		join_fundPrice=join_fundPrice+#{stock_price} where join_no=#{join_no}
	</update>

</mapper>